title: Previous - Exambuff
body: |

  <div class="summary">
    <h3>Summary</h3>
    I've <a href="http://github.com/timruffles/exambuff">open sourced</a> my defunct startup <a href="http://exambuff.co.uk">Exambuff</a>. Please take the code (40k lines) and make a go of the business - I hope the below will help. Let me know if you want the domain - or you could rebrand it. It's an exam preparation platform, written in PHP and Flex. I've included all documents and design; you could write the history of a startup with it.
  </div>
  
  

  The first business I attempted was Exambuff. It was a service to help university students pass exams. You'd write an answer to an example exam question from your course, send it to a PhD student, and they'd tell you where you were going wrong.
  
  It didn't make a single penny for me. I've decided to analyse it, and post the whole thing online. Although it didn't succeed, I'm happy I did it. Equally it'd be great if I and other people don't make the same mistakes as a result. I've added the ideas I had for more fruitful markets, and where I went wrong. Let me know how it goes!
  
  I started it on my own in the holidays of my second year of my history degree, after quitting an internship at HP (grey cubical in a grey building, doing, ugh, project management). I wrote the bulk of the code in ~6 months - September 2008 to April 2009.
  
  I counted the lines of code in the project after cleaning out libraries.
  
  <pre>
  
  555 text files.
  483 unique files.                                          
  2280 files ignored.

  http://cloc.sourceforge.net v 1.53  T=1.0 s (450.0 files/s, 67346.0 lines/s)
  -------------------------------------------------------------------------------
  Language                     files          blank        comment           code
  -------------------------------------------------------------------------------
  PHP                            315           4185          12998          26526
  HTML                            32            351            144          11181
  CSS                              9             55             73           4179
  ActionScript                    49            393            767           2211
  MXML                            27            253              3           2197
  Javascript                      15            139            209           1117
  SQL                              1             56             83            199
  XML                              2              0              0             27
  -------------------------------------------------------------------------------
  SUM:                           450           5432          14277          47637
  -------------------------------------------------------------------------------
  
  </pre>
  
  
  That's a lot of code that never saw a single paying customer...
  
  Looking back I can see so many reasons why a customer never appeared. It'd be great if there were a format for sharing post mortems in startups. Till then, I'll use PG's list of reasons startups die.
  
  ### PG's "The 18 mistakes that kill startups"
  
  Key:
  
  <ul class="key">
    <li class="yes">Explains failure</li>
    <li class="no">Didn't contribute to failure</li>
    <li class="na">Not applicable</li>
  </ul>
  

  <ul class="post_mortem">
    <li class="yes">1. Single Founder</li>
    <li class="why">I distinctly remember thinking "I'll keep all the winnings for myself". Foolish. So much better to have a small slice of something that a big one of nothing.</li>
    <li class="no">2. Bad Location</li>
    <li class="no">3. Marginal Niche</li>
    <li class="no">4. Derivative Idea</li>
    <li class="no">5. Obstinacy</li>
    <li class="no">6. Hiring Bad Programmers</li>
    <li class="why">Well, the code isn't pretty but it was hardly the limiting factor.</li>
    <li class="no">7. Choosing the Wrong Platform</li>
    <li class="yes">8. Slowness in Launching</li>
    <li class="why">I waiting for my uni to buy. I didn't realise that as an institutional customer, their decision process is measured in years.</li>
    <li class="yes">9. Launching Too Early</li>
    <li class="why">Even when I did half-launch, I didn't know anything about the customer.</li>
    <li class="no">10. Having No Specific User in Mind</li>
    <li class="na">11. Raising Too Little Money</li>
    <li class="na">12. Spending Too Much</li>
    <li class="na">13. Raising Too Much Money</li>
    <li class="na">14. Poor Investor Management</li>
    <li class="na">15. Sacrificing Users to (Supposed) Profit</li>
    <li class="yes">16. Not Wanting to Get Your Hands Dirty</li>
    <li class="why">I was too embarrassed to talk to fellow students about the idea in person, and possibly I didn't want to hear what they'd say. I did research on the project, and found most students would use it if it were free, and quite a lot of lecturers were pro too.</li>
    <li class="na">17. Fights Between Founders</li>
    <li class="no">18. A Half-Hearted Effort</li>
    <li class="why">I didn't quit my degree, but like trying to fly without wings, it's wasn't the effort that went in that prevented takeoff.
  </ul>
  
  I think the above is a good list - & PG knows his stuff, but it has flaws. It is heavy on funding and money issues - funding isn't the reason I see startups dying (perhaps reflective of different US/UK startup cultures). It's not hierarchical - what should I avoid most? But most of all I'd argue it missed or underemphasises three factors that best explain my failure in Exambuff, and, I'd argue, are more common than many of the above.
  
  <ul class="post_mortem">
    <li class="yes">19. Not understanding customers</li>
    <li class="yes">20. Harmful ramifications of knowing how to code</li>
    <li class="yes">21. Market or industry forces</li>
  </ul>
  
  #### Not understanding customers
  
  Not understanding customers is the killer. If you don't, from day 1, start talking to customers you are piling up risk. Customers will shatter your illusions and you should be thankful for it - they've saved you years of unrewarded toil. Once you've found an idea you get positive feedback for, don't stop talking! Keep going! Your product will be shoddy and irritating, and only by talking to people about it will you ever make it acceptable.
  
  I did surveys - one on Facebook and a larger one. I didn't realise how easy it is to get people to say they'd pay for something, and how little that translates into sales.
  
  If I'd talked to students I imagine I'd have got more of an idea of how unlikely this idea was to sell. If I'd really thought about, and talked to people, I'd realise that getting sales would be tough.
  
  I never did do that research, but I'd guess the following:
  
  * Most students don't care that much about their education
    * There are a lot of students in the UK, but most are cruising
  * Those who do care, wouldn't want help  
    * I cared about my study, and wouldn't have used the service from pride. I assume I'm not alone
  * Practice essays are done late
    * Very small sales window
    
  #### Harmful ramifications of knowing how to code
  
  The technical challenge is *not* the challenge in a startup. The business challenge is the elusive product market fit. Everything technical is a means to that end. That means our friend Mr H Hacker, of PG mythology, is really rather badly disposed to succeeding. To a hacker, the only important or interesting bit is the hack. They can't wait to get started on that, and skip the boring stuff like customer discovery. Once the hack is done, it feels like the challenge is over, and then they skip the boring stuff like design, marketing and sales.
  
  Sales, marketing, design are all, truly, more important to your success. You can easily sell a product without having a product! If you can't sell, your product will be going nowhere.
  
  Having technical skills makes you want to use them. If I wasn't a coder, I could have run the service as a mail-order one, or via email, or in face-to-face sessions.
  
  Additionally I should have made a simple landing page and checked if people bought before I wrote any real code.
  
  If you're a hacker find your Steve Jobs, and be self-controlled. You'll be successful and happier not to have to handle the boring bits.
  
  Don't write a line of code until your customers are validated and you have pre-orders.
  
  #### Market or industry forces
 
  The market was utterly seasonal. I couldn't run tests or promotions at any other time - no student really cares until their exams arrive. In terms of iteration this was a killer - especially compounded with being a sole founder, one who had the same schedule as the customer. I had to prepare a launch at the same time as preparing for my exams.
  
  Secondly the institutional market - universities - would be a very tough nut to crack and wasted so much time. I didn't realise that institutional customers are pretty well worthless for a startup - their sales cycle will last longer than your company. My own university, which gave me some funds, asked that I waited to launch on my campus if I wanted to sell to them. They after a year they said no. I can't believe I kept going after that really - inspiration really is perishable. I just hoped I'd be able to make direct to customer sales.
  
  ### What worked
  
  Exambuff demonstrated one thing clearly: there are a lot of extremely bright PhD students without flexible work. There have to be many interesting business based around using this resource. Some of the CVs I received were jaw-droppingly perfect - future academics and clearly high fliers. There must be a startup that could offer them work.
  
  ### What might have worked if only
  
  Whatever I think I know, I'm still unsure why people didn't want the service. I'm embarrassed to admit how little I know about the site's tiny number of visitors. Perhaps the business is quite viable if I hadn't chosen yellow as a colour scheme!
  
  ## What might work still
  
  A few ideas:
  
  * Overseas students
    * Significantly higher fees, and more at risk at doing disproportionately badly at UK exams due to less experience with the examination style, and language
  * Overseas students' parents
    * The ones paying those fees - perhaps it'd not be a stretch to pay a little more
  * GCSE & A Level student parents (US - equivalent of high-school and 1st year of college)
    * Parents often care a lot more about exam success than their offspring (until university this was true of me. Sorry parents!)
  * Professional qualifications
    * Older students, paying more for their studies
    
  ## A few thanks
  
  Along the way I met some great people. Thanks to [Adam Paulisick](http://www.qriously.com/) who gave me some killer advice that came too late to execute one. Bernard Howard also. The team at RHUL Research and Enterprise. & thanks to my still GF, for putting up with how much time I spent on it :)
  
  ## Fin
  
  So - here's a complete business to take and do something with. The platform could be used for a few different businesses, and perhaps you're the person to make something of it. It's technically derisked for one thing :) Let [me](mailto:timruffles@googlemail.com) know how it goes!
  
  
  

