title: "The Weirdest JavaScript syntax"
date: "2019/04/18"
body: |

  I have bad news. The following is valid, spec compliant JS syntax:

  ```js
  foo("hi", bar * 2) = 42;
  ```

  What in the Crockford is going on?
  
  Working on my [JS to C compiler](/writing-a-javascript-to-c-compiler) I've spent a fair bit of time reading and implementing the ECMAScript spec, specifically ES5 strict mode as it's small(er). It's in ES5 and ealier that this weird syntax exists - it [was removed in ES2015](http://ecma-international.org/ecma-262/6.0/#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions). If you read the ES1-5 specs on function calls, [you'll find](https://www.ecma-international.org/ecma-262/5.1/#sec-8.7) functions can return an internal spec type called a `Reference`

  > one difficulty: function calls are permitted to return references. This possibility is admitted purely for the sake of host objects. No built-in ECMAScript function defined by this specification returns a reference and there is no provision for a user-defined function to return a reference. 

  The `Reference` spec type is effectively a base (object or environment) and a name, e.g the `window` object as a base and `"foo"` as a name. 'Host objects' are APIs not defined by the language spec, but exposed to user programs by a specific implementation, e.g a specific browser JS DOM, or Node's APIs.

  `Reference` is a spec type rather than a JS type: it's merely a description of behaviour in various spec algorithms, so it'd never be visible in JS programs nor assignable where normal JS values are. For instance, the spec wouldn't have allowed for behaviour like this:

  ```js
  var someRef = windowTitle() 
  someRef = "pear"
  console.log(window.title) // pear
  ```

  The upshot is the spec allows functions to evaluated an assignable value in the left hand of an assignment. A imaginary spec-compliant DOM API could therefore expose a `windowTitle()` setter, that'd work like:

  ```js
  windowTitle() = "pear"
  console.log(window.title) // pear
  ```

  ##Â History

  I had to find out more - when and why did this end up in the spec? Digging through the archives, this feature was part of the very first [ES1 spec](https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%201st%20edition,%20June%201997.pdf) from 1997, which was capturing all the craziness that emerged from the early days of JS. The wording stays unchanged in the ES5 spec.

  I had to track down some examples of this feature being used. I found lots of references to people saying it was required by "old DOM APIs", in IE specifically. Then, in the ESDiscuss archive, Brendan Eich gave [an example](https://mail.mozilla.org/pipermail/es-discuss/2008-May/006367.html) in a discussion about cleaning up the spec for the never-to-be-released ES4:

  > Indeed, IE JScript (for VBScript compatibility) long ago added support for "Reference" type return values from certain native ("host object") methods. This enabled `domNode.item(i) = j`, e.g. SpiderMonkey added support because someone embedding its open source wanted to support code written for JScript.

  So the complete history of this feature goes: VBScript to IE JScript to Mozilla JavaScript to the spec.
  
  I also found a [complete code example](https://stackoverflow.com/questions/16686974/can-a-functions-return-value-be-an-lvalue-in-javascript) of the kind of, I assume, VBScript inspired APIs this'd support (can't find an official API guide for this though, frustratingly):

  ```js
  var sh = WScript.CreateObject("Wscript.Shell");
  var env = sh.Environment("PROCESS");
  env("TEST") = "testvalue";
  ```

  Absolutely no reason this couldn't have been implemented via `sh.Environment("Process").Set("TEST","testvalue")`, but one fateful day in the 90s someone made a different call. That it affected five generations of the language spec teaches us syntax is the slowest thing to change out there: language designers beware!

