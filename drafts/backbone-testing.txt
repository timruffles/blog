title: "Series intro: Building better Backbone apps faster with tests"  
date: 22/04/2012
body: |

  Testing your Backbone apps will let you write better apps, faster. This series will take you from the basics all the way to advanced testing.
  
  ![Testing your Backbone/Javascript code](/img/bbjs.png)
  
  ## Why should I care about testing?
  
  Let me give you the typical pro-testing before and after story.
  
  #### Before

  <div class="story bad">
    <div class="smiley">☹</div>
    <p>It's Friday at 18.46. Your app isn't working on IE <em>again</em>. You fix and deploy, and realise you've deployed a one character typo. Meeting friends in the pub? Don't think so.</p>
  </div>
  
  #### After
  
  Flash to a cheesy [silver-bullet](http://c2.com/cgi/wiki?SilverBullet) comparison:
  
  <div class="story good">
    <div class="smiley">☺</div>
    <p>IE didn't have <code>Array#indexOf</code> and <code>String#substr</code> can't handle negative indices but your tests altered you as you went. The release went great: no surprise, you already knew it worked from your happily blinking test suites. Desk beer!</p>
  </div>

  However, nothing in life is without a cost. Testing has one. So we have an additional story to consider:
  
  <div class="story bad">
    <div class="smiley">☹</div>
    <p>It's Friday at 18.46. A week of maintaining tests. Your Capybara backed Cucumber features take 28 minutes to run, and your 96% code coverage unit test suite had to be rewritten due to product changes. You wanted to be making users happy, not your test runner.</p>
  </div>
  
  Tests are not the goal - solving a problem for your users is. Keep that in mind and testing is a tool not a burden.
  
  ### How this series is different
  
  This series is different from most in attempting to promote a testing strategy alongside the mechanics of testing. This strategy is a constant cost-benefit analysis: is this test 'profitable'? Does it give me enough additional quality (happier users/reduction in time fixing errors) in exchange for the time to write and maintain it?

  So I'm not promising you a ticket to silver-bullet land. But I can promise you that adopting the pragmatic approach to testing it promotes will result in less stress, faster development, and better apps.
  
  ## Series overview
  
  The articles in the series will be:
  
  1. [Overview of testing with Backbone - even if you've never tested before](/testing-backbone-javascript-tutorial)
  1. Nuts'n'bolts of Javascript testing - stubs, mocks and assertions
  1. Testing Backbone views
  1. Testing Backbone models
  1. Creating a mocked server for Backbone apps
  1. The fiddly bit - asynchronous tests
  1. Functional tests for Backbone
  1. Advanced Backbone views - easy testing with view models
  1. The hard problem of testing - when to test, what to test
  
  I'll also be creating a [Javascript & Backbone testing glossary](/javascript-backbone-testing-glossary) as I go.
  
  ## Disclaimer
  
  I stress this is series is drawn from the methods I've found most effective while developing a number of products with Backbone - [real time games](http://picklive.com), a [Twitter client](http://teachthebird.com) and [Chrome extensions](http://arachnys.com). There are many opinions about testings. If there's controversy about the best way of writing tests I'll flag it up with my choice and the reasoning behind it.
  
  ## Series lessons
  
  By the end of it you'll be able to:
    
  - write well tested Backbone models and views
  - test all the fiddly bits - functional tests, AJAX and asynchronous tests
  - create demo servers to run your app without a live backend.
  
  The core messages I'll be attempting to promote and justify are:
    
  - JS/Backbone testing is easy and valuable
  - knowing when to test is a hard problem
  - testing is a tool, not a goal
  
  ## Schedule
  
  I'll be posting the rest of the articles over the next few weeks. Subscribe to [the feed](http://feeds.feedburner.com/TimRufflesBlog) to be notified of the new articles.
  
  If you're in the UK, you might like the class I've run before and will run again in the future at General Assembly London, [Building Web Apps with Backbone.js](http://www.eventbrite.com/event/3306153795/eorg?ebtv=C). It'll take you through Backbone.js from the basics, and work through a case study of converting a legacy jQuery app into a single-page Backbone app.
  
  Thanks for reading, please say hi if you've any questions - [@timruffles](http://twttr.com/timruffles).
